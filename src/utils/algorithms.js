'use strict';

define([], function() {

  function createArray(size, contents) {
    var array = new Array(size);
    for (var i = 0; i < size; i ++) {
      array[i] = contents;
    }
    return array;
  }

  var opad_512 =  createArray(64,  0x5c);
  var ipad_512 =  createArray(64,  0x36);
  var opad_1024 = createArray(128, 0x5c);
  var ipad_1024 = createArray(128, 0x36);

  var algorithms: {
    'SHA-1':   {
      hash_size: 20,
      block_size: 64,
      empty_hash: [0xDA, 0x39, 0xA3, 0xEE, 0x5E, 0x6B, 0x4B, 0x0D, 0x32, 0x55, 0xBF, 0xEF, 0x95, 0x60, 0x18, 0x90, 0xAF, 0xD8, 0x07, 0x09],
      empty_hmac: [0xFB, 0xDB, 0x1D, 0x1B, 0x18, 0xAA, 0x6C, 0x08, 0x32, 0x4B, 0x7D, 0x64, 0xB7, 0x1F, 0xB7, 0x63, 0x70, 0x69, 0x0E, 0x1D],
      hmac_outer_padding: opad_512,
      hmac_inner_padding: ipad_512
    },
    'SHA-224': {
      hash_size: 28,
      block_size: 64,
      empty_hash: [0xD1, 0x4A, 0x02, 0x8C, 0x2A, 0x3A, 0x2B, 0xC9, 0x47, 0x61, 0x02, 0xBB, 0x28, 0x82, 0x34, 0xC4, 0x15, 0xA2, 0xB0, 0x1F, 0x82, 0x8E, 0xA6, 0x2A, 0xC5, 0xB3, 0xE4, 0x2F],
      empty_hmac: [0x5C, 0xE1, 0x4F, 0x72, 0x89, 0x46, 0x62, 0x21, 0x3E, 0x27, 0x48, 0xD2, 0xA6, 0xBA, 0x23, 0x4B, 0x74, 0x26, 0x39, 0x10, 0xCE, 0xDD, 0xE2, 0xF5, 0xA9, 0x27, 0x15, 0x24],
      hmac_outer_padding: opad_512,
      hmac_inner_padding: ipad_512
    },
    'SHA-256': {
      hash_size: 32,
      block_size: 64,
      empty_hash: [0xE3, 0xB0, 0xC4, 0x42, 0x98, 0xFC, 0x1C, 0x14, 0x9A, 0xFB, 0xF4, 0xC8, 0x99, 0x6F, 0xB9, 0x24, 0x27, 0xAE, 0x41, 0xE4, 0x64, 0x9B, 0x93, 0x4C, 0xA4, 0x95, 0x99, 0x1B, 0x78, 0x52, 0xB8, 0x55],
      empty_hmac: [0xB6, 0x13, 0x67, 0x9A, 0x08, 0x14, 0xD9, 0xEC, 0x77, 0x2F, 0x95, 0xD7, 0x78, 0xC3, 0x5F, 0xC5, 0xFF, 0x16, 0x97, 0xC4, 0x93, 0x71, 0x56, 0x53, 0xC6, 0xC7, 0x12, 0x14, 0x42, 0x92, 0xC5, 0xAD],
      hmac_outer_padding: opad_512,
      hmac_inner_padding: ipad_512
    },
    'SHA-384': {
      hash_size: 48,
      block_size: 128,
      empty_hash: [0x38, 0xB0, 0x60, 0xA7, 0x51, 0xAC, 0x96, 0x38, 0x4C, 0xD9, 0x32, 0x7E, 0xB1, 0xB1, 0xE3, 0x6A, 0x21, 0xFD, 0xB7, 0x11, 0x14, 0xBE, 0x07, 0x43, 0x4C, 0x0C, 0xC7, 0xBF, 0x63, 0xF6, 0xE1, 0xDA, 0x27, 0x4E, 0xDE, 0xBF, 0xE7, 0x6F, 0x65, 0xFB, 0xD5, 0x1A, 0xD2, 0xF1, 0x48, 0x98, 0xB9, 0x5B],
      empty_hmac: [0x6C, 0x1F, 0x2E, 0xE9, 0x38, 0xFA, 0xD2, 0xE2, 0x4B, 0xD9, 0x12, 0x98, 0x47, 0x43, 0x82, 0xCA, 0x21, 0x8C, 0x75, 0xDB, 0x3D, 0x83, 0xE1, 0x14, 0xB3, 0xD4, 0x36, 0x77, 0x76, 0xD1, 0x4D, 0x35, 0x51, 0x28, 0x9E, 0x75, 0xE8, 0x20, 0x9C, 0xD4, 0xB7, 0x92, 0x30, 0x28, 0x40, 0x23, 0x4A, 0xDC],
      hmac_outer_padding: opad_1024,
      hmac_inner_padding: ipad_1024
    },
    'SHA-512': {
      hash_size: 64,
      block_size: 128,
      empty_hash: [0xCF, 0x83, 0xE1, 0x35, 0x7E, 0xEF, 0xB8, 0xBD, 0xF1, 0x54, 0x28, 0x50, 0xD6, 0x6D, 0x80, 0x07, 0xD6, 0x20, 0xE4, 0x05, 0x0B, 0x57, 0x15, 0xDC, 0x83, 0xF4, 0xA9, 0x21, 0xD3, 0x6C, 0xE9, 0xCE, 0x47, 0xD0, 0xD1, 0x3C, 0x5D, 0x85, 0xF2, 0xB0, 0xFF, 0x83, 0x18, 0xD2, 0x87, 0x7E, 0xEC, 0x2F, 0x63, 0xB9, 0x31, 0xBD, 0x47, 0x41, 0x7A, 0x81, 0xA5, 0x38, 0x32, 0x7A, 0xF9, 0x27, 0xDA, 0x3E],
      empty_hmac: [0xB9, 0x36, 0xCE, 0xE8, 0x6C, 0x9F, 0x87, 0xAA, 0x5D, 0x3C, 0x6F, 0x2E, 0x84, 0xCB, 0x5A, 0x42, 0x39, 0xA5, 0xFE, 0x50, 0x48, 0x0A, 0x6E, 0xC6, 0x6B, 0x70, 0xAB, 0x5B, 0x1F, 0x4A, 0xC6, 0x73, 0x0C, 0x6C, 0x51, 0x54, 0x21, 0xB3, 0x27, 0xEC, 0x1D, 0x69, 0x40, 0x2E, 0x53, 0xDF, 0xB4, 0x9A, 0xD7, 0x38, 0x1E, 0xB0, 0x67, 0xB3, 0x38, 0xFD, 0x7B, 0x0C, 0xB2, 0x22, 0x47, 0x22, 0x5D, 0x47],
      hmac_outer_padding: opad_1024,
      hmac_inner_padding: ipad_1024
    }
  }
});
